!(function (t, e) {
    "object" == typeof exports && "undefined" != typeof module
        ? e(exports)
        : "function" == typeof define && define.amd
        ? define(["exports"], e)
        : e(((t = "undefined" != typeof globalThis ? globalThis : t || self).yett = {}));
})(this, function (t) {
    "use strict";
    function o(e, t) {
        return (
            e &&
            (!t || t !== c) &&
            (!a.blacklist ||
                a.blacklist.some(function (t) {
                    return t.test(e);
                })) &&
            (!a.whitelist ||
                a.whitelist.every(function (t) {
                    return !t.test(e);
                }))
        );
    }
    function s(t) {
        var e = t.getAttribute("src");
        return (
            (a.blacklist &&
                a.blacklist.every(function (t) {
                    return !t.test(e);
                })) ||
            (a.whitelist &&
                a.whitelist.some(function (t) {
                    return t.test(e);
                }))
        );
    }
    var c = "javascript/blocked",
        a = { blacklist: window.YETT_BLACKLIST, whitelist: window.YETT_WHITELIST },
        u = { blacklisted: [] },
        f = new MutationObserver(function (t) {
            for (var e = 0; e < t.length; e++)
                for (
                    var i = t[e].addedNodes,
                        r = function (t) {
                            var r = i[t];
                            if (1 === r.nodeType && "SCRIPT" === r.tagName) {
                                var e = r.src,
                                    n = r.type;
                                if (o(e, n)) {
                                    u.blacklisted.push([r, r.type]), (r.type = c);
                                    r.addEventListener("beforescriptexecute", function t(e) {
                                        r.getAttribute("type") === c && e.preventDefault(),
                                            r.removeEventListener("beforescriptexecute", t);
                                    }),
                                        r.parentElement && r.parentElement.removeChild(r);
                                }
                            }
                        },
                        n = 0;
                    n < i.length;
                    n++
                )
                    r(n);
        });
    f.observe(document.documentElement, { childList: !0, subtree: !0 });
    var i = document.createElement,
        l = {
            src: Object.getOwnPropertyDescriptor(HTMLScriptElement.prototype, "src"),
            type: Object.getOwnPropertyDescriptor(HTMLScriptElement.prototype, "type"),
        };
    function p(t, e) {
        return (
            (function (t) {
                if (Array.isArray(t)) return t;
            })(t) ||
            (function (t, e) {
                var r = t && (("undefined" != typeof Symbol && t[Symbol.iterator]) || t["@@iterator"]);
                if (null == r) return;
                var n,
                    i,
                    o = [],
                    c = !0,
                    a = !1;
                try {
                    for (r = r.call(t); !(c = (n = r.next()).done) && (o.push(n.value), !e || o.length !== e); c = !0);
                } catch (t) {
                    (a = !0), (i = t);
                } finally {
                    try {
                        c || null == r.return || r.return();
                    } finally {
                        if (a) throw i;
                    }
                }
                return o;
            })(t, e) ||
            r(t, e) ||
            (function () {
                throw new TypeError(
                    "Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.",
                );
            })()
        );
    }
    function y(t) {
        return (
            (function (t) {
                if (Array.isArray(t)) return n(t);
            })(t) ||
            (function (t) {
                if (("undefined" != typeof Symbol && null != t[Symbol.iterator]) || null != t["@@iterator"])
                    return Array.from(t);
            })(t) ||
            r(t) ||
            (function () {
                throw new TypeError(
                    "Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.",
                );
            })()
        );
    }
    function r(t, e) {
        if (t) {
            if ("string" == typeof t) return n(t, e);
            var r = Object.prototype.toString.call(t).slice(8, -1);
            return (
                "Object" === r && t.constructor && (r = t.constructor.name),
                "Map" === r || "Set" === r
                    ? Array.from(t)
                    : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)
                    ? n(t, e)
                    : void 0
            );
        }
    }
    function n(t, e) {
        (null == e || e > t.length) && (e = t.length);
        for (var r = 0, n = new Array(e); r < e; r++) n[r] = t[r];
        return n;
    }
    document.createElement = function () {
        for (var t = arguments.length, e = new Array(t), r = 0; r < t; r++) e[r] = arguments[r];
        if ("script" !== e[0].toLowerCase()) return i.bind(document).apply(void 0, e);
        var n = i.bind(document).apply(void 0, e);
        try {
            Object.defineProperties(n, {
                src: {
                    get: function () {
                        return l.src.get.call(this);
                    },
                    set: function (t) {
                        o(t, n.type) && l.type.set.call(this, c), l.src.set.call(this, t);
                    },
                },
                type: {
                    set: function (t) {
                        var e = o(n.src, n.type) ? c : t;
                        l.type.set.call(this, e);
                    },
                },
            }),
                (n.setAttribute = function (t, e) {
                    "type" === t || "src" === t ? (n[t] = e) : HTMLScriptElement.prototype.setAttribute.call(n, t, e);
                });
        } catch (t) {
            console.warn(
                "Yett: unable to prevent script execution for script src ",
                n.src,
                ".\n",
                'A likely cause would be because you are using a third-party browser extension that monkey patches the "document.createElement" function.',
            );
        }
        return n;
    };
    var d = new RegExp("[|\\{}()[\\]^$+*?.]", "g");
    (t.unblock = function () {
        for (var t = arguments.length, r = new Array(t), e = 0; e < t; e++) r[e] = arguments[e];
        r.length < 1
            ? ((a.blacklist = []), (a.whitelist = []))
            : (a.blacklist &&
                  (a.blacklist = a.blacklist.filter(function (e) {
                      return r.every(function (t) {
                          return "string" == typeof t
                              ? !e.test(t)
                              : t instanceof RegExp
                              ? e.toString() !== t.toString()
                              : void 0;
                      });
                  })),
              a.whitelist &&
                  (a.whitelist = [].concat(
                      y(a.whitelist),
                      y(
                          r
                              .map(function (e) {
                                  if ("string" == typeof e) {
                                      var r = ".*" + e.replace(d, "\\$&") + ".*";
                                      if (
                                          a.whitelist.every(function (t) {
                                              return t.toString() !== r.toString();
                                          })
                                      )
                                          return new RegExp(r);
                                  } else if (
                                      e instanceof RegExp &&
                                      a.whitelist.every(function (t) {
                                          return t.toString() !== e.toString();
                                      })
                                  )
                                      return e;
                                  return null;
                              })
                              .filter(Boolean),
                      ),
                  )));
        for (var n = document.querySelectorAll('script[type="'.concat(c, '"]')), i = 0; i < n.length; i++) {
            var o = n[i];
            s(o) && (u.blacklisted.push([o, "application/javascript"]), o.parentElement.removeChild(o));
        }
        var l = 0;
        y(u.blacklisted).forEach(function (t, e) {
            var r = p(t, 2),
                n = r[0],
                i = r[1];
            if (s(n)) {
                for (var o = document.createElement("script"), c = 0; c < n.attributes.length; c++) {
                    var a = n.attributes[c];
                    "src" !== a.name && "type" !== a.name && o.setAttribute(a.name, n.attributes[c].value);
                }
                o.setAttribute("src", n.src),
                    o.setAttribute("type", i || "application/javascript"),
                    document.head.appendChild(o),
                    u.blacklisted.splice(e - l, 1),
                    l++;
            }
        }),
            a.blacklist && a.blacklist.length < 1 && f.disconnect();
    }),
        Object.defineProperty(t, "__esModule", { value: !0 });
});
//# sourceMappingURL=yett.min.js.map
